datasource database {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "prisma-client-js"
  output   = "../db"
}

generator erd {
  provider = "prisma-markdown"
  output   = "../ERD.md"
  title    = "BBS"
}

enum OauthType {
  github
  kakao
}

enum ArticleBodyFormat {
  html
  md
  txt
}

/// Root Entity of Article
/// 
/// @namespace All
/// 
/// @namespace Board
/// 
/// @namespace Comment
/// 
/// @namespace Article
/// 
/// @author industriously
/// 
model articles {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id         String              @id @database.Uuid
  /// referenced in `users`
  /// 
  /// `uuid` type
  /// 
  author_id  String              @database.Uuid
  author     users               @relation(fields: [author_id], references: [id])
  /// referenced in `boards`
  /// 
  /// `uuid` type
  /// 
  board_id   String              @database.Uuid
  board      boards              @relation(fields: [board_id], references: [id])
  /// creation time of record
  /// 
  created_at DateTime            @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at DateTime?           @database.Timestamptz
  snapshots  article_snapshots[]
  comments   comments[]
}

/// Snapshot of Article
/// 
/// an `article_snapshots` record contains the content of an article's specific version.
/// 
/// When a user edit an article, a new snapshot record is created, and readers will view the snapshot record linked to the most recently created version among the connected records.
/// 
/// @namespace All
/// 
/// @namespace Article
/// 
/// @author industriously
/// 
model article_snapshots {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id                   String                         @id @database.Uuid
  /// referenced in `articles`
  /// 
  /// `uuid` type
  /// 
  article_id           String                         @database.Uuid
  article              articles                       @relation(fields: [article_id], references: [id])
  /// title of article
  /// 
  title                String
  /// URL path of article body resource
  /// 
  body_url             String
  /// one of `html`, `md`, `txt`
  /// 
  body_format          ArticleBodyFormat
  /// creation time of record
  /// 
  created_at           DateTime                       @database.Timestamptz
  attachment_relations article_snapshot_attachments[]
}

/// Relation Attachment with Article Snapshot
/// 
/// an `article_snapshot_attachments` entity connects an `article_snapshots` record with an `attachments` record.
/// 
/// If author add attachment to an article, a new record of `article_snapshot_attachments` is created.
/// 
/// @namespace All
/// 
/// @namespace Article
/// 
/// @author industriously
/// 
model article_snapshot_attachments {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id            String            @id @database.Uuid
  /// referenced in `article_snapshots`
  /// 
  /// `uuid` type
  /// 
  snapshot_id   String            @database.Uuid
  snapshot      article_snapshots @relation(fields: [snapshot_id], references: [id])
  /// referenced in `attachments`
  /// 
  /// `uuid` type
  /// 
  attachment_id String            @database.Uuid
  attachment    attachments       @relation(fields: [attachment_id], references: [id])
}

/// Root Entity of Board
/// 
/// @namespace All
/// 
/// @namespace Board
/// 
/// @namespace Article
/// 
/// @author industriously
/// 
model boards {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id                            String                          @id @database.Uuid
  name                          String
  description                   String
  /// referenced in `users`
  /// 
  /// `uuid` type
  /// 
  admin_id                      String                          @database.Uuid
  admin                         users                           @relation(fields: [admin_id], references: [id])
  /// creation time of record
  /// 
  created_at                    DateTime                        @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at                    DateTime?                       @database.Timestamptz
  articles                      articles[]
  read_article_list_permissions read_article_list_permissions[]
  read_article_permissions      read_article_permissions[]
  write_article_permissions     write_article_permissions[]
  read_comment_list_permissions read_comment_list_permissions[]
  write_comment_permissions     write_comment_permissions[]
}

/// Permission for read article list of board
/// 
/// @namespace All
/// 
/// @namespace Board
/// 
/// @namespace Permission
/// 
/// @author industriously
/// 
model read_article_list_permissions {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id         String            @id @database.Uuid
  /// referenced in `boards`
  /// 
  /// `uuid` type
  /// 
  board_id   String            @database.Uuid
  board      boards            @relation(fields: [board_id], references: [id])
  /// referenced in `permission_groups`
  /// 
  /// `uuid` type
  /// 
  group_id   String            @database.Uuid
  group      permission_groups @relation(fields: [group_id], references: [id])
  /// creation time of record
  /// 
  created_at DateTime          @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at DateTime?         @database.Timestamptz
}

/// Permission for read article of board
/// 
/// @namespace All
/// 
/// @namespace Board
/// 
/// @namespace Permission
/// 
/// @author industriously
/// 
model read_article_permissions {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id         String            @id @database.Uuid
  /// referenced in `boards`
  /// 
  /// `uuid` type
  /// 
  board_id   String            @database.Uuid
  board      boards            @relation(fields: [board_id], references: [id])
  /// referenced in `permission_groups`
  /// 
  /// `uuid` type
  /// 
  group_id   String            @database.Uuid
  group      permission_groups @relation(fields: [group_id], references: [id])
  /// creation time of record
  /// 
  created_at DateTime          @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at DateTime?         @database.Timestamptz
}

/// Permission for write article of board
/// 
/// @namespace All
/// 
/// @namespace Board
/// 
/// @namespace Permission
/// 
/// @author industriously
/// 
model write_article_permissions {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id         String            @id @database.Uuid
  /// referenced in `boards`
  /// 
  /// `uuid` type
  /// 
  board_id   String            @database.Uuid
  board      boards            @relation(fields: [board_id], references: [id])
  /// referenced in `permission_groups`
  /// 
  /// `uuid` type
  /// 
  group_id   String            @database.Uuid
  group      permission_groups @relation(fields: [group_id], references: [id])
  /// creation time of record
  /// 
  created_at DateTime          @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at DateTime?         @database.Timestamptz
}

/// Permission for read comment list of board
/// 
/// @namespace All
/// 
/// @namespace Board
/// 
/// @namespace Permission
/// 
/// @author industriously
/// 
model read_comment_list_permissions {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id         String            @id @database.Uuid
  /// referenced in `boards`
  /// 
  /// `uuid` type
  /// 
  board_id   String            @database.Uuid
  board      boards            @relation(fields: [board_id], references: [id])
  /// referenced in `permission_groups`
  /// 
  /// `uuid` type
  /// 
  group_id   String            @database.Uuid
  group      permission_groups @relation(fields: [group_id], references: [id])
  /// creation time of record
  /// 
  created_at DateTime          @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at DateTime?         @database.Timestamptz
}

/// Permission for write comment of board
/// 
/// @namespace All
/// 
/// @namespace Board
/// 
/// @namespace Permission
/// 
/// @author industriously
/// 
model write_comment_permissions {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id         String            @id @database.Uuid
  /// referenced in `boards`
  /// 
  /// `uuid` type
  /// 
  board_id   String            @database.Uuid
  board      boards            @relation(fields: [board_id], references: [id])
  /// referenced in `permission_groups`
  /// 
  /// `uuid` type
  /// 
  group_id   String            @database.Uuid
  group      permission_groups @relation(fields: [group_id], references: [id])
  /// creation time of record
  /// 
  created_at DateTime          @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at DateTime?         @database.Timestamptz
}

/// Root Entity of Comment
/// 
/// a user can comment short text on article or other comment
/// 
/// @namespace All
/// 
/// @namespace Article
/// 
/// @namespace Comment
/// 
/// @author industriously
/// 
model comments {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id         String              @id @database.Uuid
  /// referenced in `users`
  /// 
  /// `uuid` type
  /// 
  author_id  String              @database.Uuid
  author     users               @relation(fields: [author_id], references: [id])
  /// referenced in `articles`
  /// 
  /// `uuid` type
  /// 
  article_id String              @database.Uuid
  article    articles            @relation(fields: [article_id], references: [id])
  /// referenced in `comments`
  /// 
  /// `uuid` type
  /// 
  /// a parent comment id in a hierarchical structure
  /// 
  parent_id  String?             @database.Uuid
  parent     comments?           @relation(fields: [parent_id], references: [id], name: "HierarchicalComment")
  /// creation time of record
  /// 
  created_at DateTime            @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at DateTime?           @database.Timestamptz
  snapshots  comment_snapshots[]
  children   comments[]          @relation(name: "HierarchicalComment")
}

/// Snapshot of Comment
/// 
/// an `comment_snapshots` record contains the content of an comment's specific version.
/// 
/// When a user edit an comment, a new snapshot record is created, and readers will view the snapshot record linked to the most recently created version among the connected records.
/// 
/// @namespace All
/// 
/// @namespace Comment
/// 
/// @author industriously
/// 
model comment_snapshots {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id         String   @id @database.Uuid
  /// referenced in `comments`
  /// 
  /// `uuid` type
  /// 
  comment_id String   @database.Uuid
  comment    comments @relation(fields: [comment_id], references: [id])
  body       String
  /// creation time of record
  /// 
  created_at DateTime @database.Timestamptz
}

/// Attachment Entity
/// 
/// All the attachment resources managed in the BBS
/// 
/// @namespace All
/// 
/// @namespace Article
/// 
/// @author industriously
/// 
model attachments {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id                         String                         @id @database.Uuid
  /// name of attachment resource
  /// 
  name                       String
  /// extension of resource like `md`, `html`, `jpeg`...
  /// 
  extension                  String
  /// URL path of real resource
  /// 
  url                        String
  /// creation time of record
  /// 
  created_at                 DateTime                       @database.Timestamptz
  article_snapshot_relations article_snapshot_attachments[]
}

/// Permission Group Entity
/// 
/// If user belong to a `permission_groups` record, user have permission on the group
/// 
/// e.g., `read article`, `write article`, `read comment`, `write comment`
/// 
/// @namespace All
/// 
/// @namespace Permission
/// 
/// @author industriously
/// 
model permission_groups {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id                            String                          @id @database.Uuid
  name                          String
  /// referenced in `users`
  /// 
  /// `uuid` type
  /// 
  admin_id                      String                          @database.Uuid
  admin                         users                           @relation(fields: [admin_id], references: [id])
  /// creation time of record
  /// 
  created_at                    DateTime                        @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at                    DateTime?                       @database.Timestamptz
  read_article_list_permissions read_article_list_permissions[]
  read_article_permissions      read_article_permissions[]
  write_article_permissions     write_article_permissions[]
  read_comment_list_permissions read_comment_list_permissions[]
  write_comment_permissions     write_comment_permissions[]
  users                         user_permissions[]
}

/// Authentication Entity of User
/// 
/// @namespace All
/// 
/// @namespace User
/// 
/// @author industriously
/// 
model authentications {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id         String    @id @database.Uuid
  /// referenced in `users`
  /// 
  /// `uuid` type
  /// 
  user_id    String?   @database.Uuid
  user       users?    @relation(fields: [user_id], references: [id])
  /// one of `github`, `kakao`
  /// 
  oauth_type OauthType
  /// oauth server user id
  /// 
  oauth_sub  String
  /// verified email
  /// 
  email      String?
  /// creation time of record
  /// 
  created_at DateTime  @database.Timestamptz
  /// revision time of record
  /// 
  updated_at DateTime? @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at DateTime? @database.Timestamptz
}

/// Root Entity of User
/// 
/// @namespace All
/// 
/// @namespace Article
/// 
/// @namespace Comment
/// 
/// @namespace Board
/// 
/// @namespace User
/// 
/// @author industriously
/// 
model users {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id                        String              @id @database.Uuid
  /// displayed name of user
  /// 
  name                      String
  /// url of user profile image
  /// 
  image_url                 String?
  /// user introduction
  /// 
  introduction              String
  /// creation time of record
  /// 
  created_at                DateTime            @database.Timestamptz
  /// revision time of record
  /// 
  updated_at                DateTime?           @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at                DateTime?           @database.Timestamptz
  authentications           authentications[]
  articles                  articles[]
  comments                  comments[]
  managed_permission_groups permission_groups[]
  managed_boards            boards[]
  permissions               user_permissions[]
}

/// User's Permission
/// 
/// If a user belong to a `permission_groups` record, a `user_permissions` record is created.
/// 
/// @namespace All
/// 
/// @namespace User
/// 
/// @namespace Permission
/// 
/// @author industriously
/// 
model user_permissions {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id         String            @id @database.Uuid
  /// referenced in `users`
  /// 
  /// `uuid` type
  /// 
  user_id    String            @database.Uuid
  user       users             @relation(fields: [user_id], references: [id])
  /// referenced in `permission_groups`
  /// 
  /// `uuid` type
  /// 
  group_id   String            @database.Uuid
  group      permission_groups @relation(fields: [group_id], references: [id])
  /// creation time of record
  /// 
  created_at DateTime          @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at DateTime?         @database.Timestamptz
}
