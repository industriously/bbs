datasource database {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "prisma-client-js"
  output   = "../db"
}

generator erd {
  provider = "prisma-markdown"
  output   = "../ERD.md"
  title    = "BBS"
}

enum ArticleBodyFormatType {
  html
  md
  txt
}

/// Attachment Entity
/// 
/// All the attachment resources managed in the BBS
/// 
/// @namespace BBS
/// 
/// @author industriously
/// 
model attachments {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id                         String                         @id @database.Uuid
  /// name of attachment resource
  /// 
  name                       String
  /// extension of resource like `md`, `html`, `jpeg`...
  /// 
  extension                  String
  /// URL path of real resource
  /// 
  url                        String
  /// creation time of record
  /// 
  created_at                 DateTime                       @database.Timestamptz
  article_snapshot_relations article_snapshot_attachments[]
}

/// Root Entity of Article
/// 
/// @namespace BBS
/// 
/// @author industriously
/// 
model articles {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id         String              @id @database.Uuid
  /// referenced in `users`
  /// 
  /// `uuid` type
  /// 
  author_id  String              @database.Uuid
  author     users               @relation(fields: [author_id], references: [id])
  /// creation time of record
  /// 
  created_at DateTime            @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at DateTime?           @database.Timestamptz
  snapshots  article_snapshots[]
  comments   comments[]
}

/// Snapshot of Article
/// 
/// an `article_snapshots` record contains the content of an article's specific version.
/// 
/// When a user edit an article, a new snapshot record is created, and readers will view the snapshot record linked to the most recently created version among the connected records.
/// 
/// @namespace BBS
/// 
/// @author industriously
/// 
model article_snapshots {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id                   String                         @id @database.Uuid
  /// referenced in `articles`
  /// 
  /// `uuid` type
  /// 
  article_id           String                         @database.Uuid
  article              articles                       @relation(fields: [article_id], references: [id])
  /// title of article
  /// 
  title                String
  /// URL path of article body resource
  /// 
  body_url             String
  /// one of `html`, `md`, `txt`
  /// 
  body_format          ArticleBodyFormatType
  /// creation time of record
  /// 
  created_at           DateTime                       @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at           DateTime?                      @database.Timestamptz
  attachment_relations article_snapshot_attachments[]
}

/// Relation Attachment with Article Snapshot
/// 
/// an `article_snapshot_attachments` entity connects an `article_snapshots` record with an `attachments` record.
/// 
/// If author add attachment to an article, a new record of `article_snapshot_attachments` is created.
/// 
/// @namespace BBS
/// 
/// @author industriously
/// 
model article_snapshot_attachments {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id                  String            @id @database.Uuid
  /// referenced in `article_snapshots`
  /// 
  /// `uuid` type
  /// 
  article_snapshot_id String            @database.Uuid
  article_snapshot    article_snapshots @relation(fields: [article_snapshot_id], references: [id])
  /// referenced in `attachments`
  /// 
  /// `uuid` type
  /// 
  attachment_id       String            @database.Uuid
  attachment          attachments       @relation(fields: [attachment_id], references: [id])
}

/// Root Entity of Article Comment
/// 
/// @namespace BBS
/// 
/// @author industriously
/// 
model comments {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id         String              @id @database.Uuid
  /// referenced in `users`
  /// 
  /// `uuid` type
  /// 
  author_id  String              @database.Uuid
  author     users               @relation(fields: [author_id], references: [id])
  /// referenced in `articles`
  /// 
  /// `uuid` type
  /// 
  article_id String              @database.Uuid
  article    articles            @relation(fields: [article_id], references: [id])
  /// referenced in `comments`
  /// 
  /// `uuid` type
  /// 
  /// a parent comment id in a hierarchical structure
  /// 
  parent_id  String?             @database.Uuid
  parent     comments?           @relation(fields: [parent_id], references: [id], name: "HierarchicalComment")
  /// creation time of record
  /// 
  created_at DateTime            @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at DateTime?           @database.Timestamptz
  snapshots  comment_snapshots[]
  children   comments[]          @relation(name: "HierarchicalComment")
}

/// Snapshot of Article Comment
/// 
/// @namespace BBS
/// 
/// @author industriously
/// 
model comment_snapshots {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id         String    @id @database.Uuid
  /// referenced in `comments`
  /// 
  /// `uuid` type
  /// 
  comment_id String    @database.Uuid
  comment    comments  @relation(fields: [comment_id], references: [id])
  body       String
  /// creation time of record
  /// 
  created_at DateTime  @database.Timestamptz
  /// deletion time of record
  /// 
  /// if null, a record is soft-deleted
  /// 
  deleted_at DateTime? @database.Timestamptz
}

/// Root Entity of User
/// 
/// @namespace User
/// 
/// @author industriously
/// 
model users {
  /// record identity
  /// 
  /// `uuid` type
  /// 
  id       String     @id @database.Uuid
  name     String
  articles articles[]
  comments comments[]
}
